//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Users = newUsersTable("public", "users", "")

type usersTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	SlackID      postgres.ColumnString
	IsAdmin      postgres.ColumnBool
	Role         postgres.ColumnString
	Position     postgres.ColumnString
	FamilyStatus postgres.ColumnString
	Sex          postgres.ColumnString
	JoinedAt     postgres.ColumnTimestampz
	CreatedAt    postgres.ColumnTimestampz
	IsActive     postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		SlackIDColumn      = postgres.StringColumn("slack_id")
		IsAdminColumn      = postgres.BoolColumn("is_admin")
		RoleColumn         = postgres.StringColumn("role")
		PositionColumn     = postgres.StringColumn("position")
		FamilyStatusColumn = postgres.StringColumn("family_status")
		SexColumn          = postgres.StringColumn("sex")
		JoinedAtColumn     = postgres.TimestampzColumn("joined_at")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		IsActiveColumn     = postgres.BoolColumn("is_active")
		allColumns         = postgres.ColumnList{IDColumn, SlackIDColumn, IsAdminColumn, RoleColumn, PositionColumn, FamilyStatusColumn, SexColumn, JoinedAtColumn, CreatedAtColumn, IsActiveColumn}
		mutableColumns     = postgres.ColumnList{SlackIDColumn, IsAdminColumn, RoleColumn, PositionColumn, FamilyStatusColumn, SexColumn, JoinedAtColumn, CreatedAtColumn, IsActiveColumn}
	)

	return usersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		SlackID:      SlackIDColumn,
		IsAdmin:      IsAdminColumn,
		Role:         RoleColumn,
		Position:     PositionColumn,
		FamilyStatus: FamilyStatusColumn,
		Sex:          SexColumn,
		JoinedAt:     JoinedAtColumn,
		CreatedAt:    CreatedAtColumn,
		IsActive:     IsActiveColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
