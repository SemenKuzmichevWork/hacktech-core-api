//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserReports = newUserReportsTable("public", "user_reports", "")

type userReportsTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	ReportedBy postgres.ColumnString
	Kind       postgres.ColumnString
	Rating     postgres.ColumnInteger
	CreatedAt  postgres.ColumnTimestampz
	UpdatedAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserReportsTable struct {
	userReportsTable

	EXCLUDED userReportsTable
}

// AS creates new UserReportsTable with assigned alias
func (a UserReportsTable) AS(alias string) *UserReportsTable {
	return newUserReportsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserReportsTable with assigned schema name
func (a UserReportsTable) FromSchema(schemaName string) *UserReportsTable {
	return newUserReportsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserReportsTable with assigned table prefix
func (a UserReportsTable) WithPrefix(prefix string) *UserReportsTable {
	return newUserReportsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserReportsTable with assigned table suffix
func (a UserReportsTable) WithSuffix(suffix string) *UserReportsTable {
	return newUserReportsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserReportsTable(schemaName, tableName, alias string) *UserReportsTable {
	return &UserReportsTable{
		userReportsTable: newUserReportsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserReportsTableImpl("", "excluded", ""),
	}
}

func newUserReportsTableImpl(schemaName, tableName, alias string) userReportsTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		ReportedByColumn = postgres.StringColumn("reported_by")
		KindColumn       = postgres.StringColumn("kind")
		RatingColumn     = postgres.IntegerColumn("rating")
		CreatedAtColumn  = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn  = postgres.TimestampzColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, ReportedByColumn, KindColumn, RatingColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{ReportedByColumn, KindColumn, RatingColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return userReportsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ReportedBy: ReportedByColumn,
		Kind:       KindColumn,
		Rating:     RatingColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
