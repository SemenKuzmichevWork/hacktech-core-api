//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CompanyPositions = newCompanyPositionsTable("public", "company_positions", "")

type companyPositionsTable struct {
	postgres.Table

	// Columns
	PositionName postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CompanyPositionsTable struct {
	companyPositionsTable

	EXCLUDED companyPositionsTable
}

// AS creates new CompanyPositionsTable with assigned alias
func (a CompanyPositionsTable) AS(alias string) *CompanyPositionsTable {
	return newCompanyPositionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CompanyPositionsTable with assigned schema name
func (a CompanyPositionsTable) FromSchema(schemaName string) *CompanyPositionsTable {
	return newCompanyPositionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CompanyPositionsTable with assigned table prefix
func (a CompanyPositionsTable) WithPrefix(prefix string) *CompanyPositionsTable {
	return newCompanyPositionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CompanyPositionsTable with assigned table suffix
func (a CompanyPositionsTable) WithSuffix(suffix string) *CompanyPositionsTable {
	return newCompanyPositionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCompanyPositionsTable(schemaName, tableName, alias string) *CompanyPositionsTable {
	return &CompanyPositionsTable{
		companyPositionsTable: newCompanyPositionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newCompanyPositionsTableImpl("", "excluded", ""),
	}
}

func newCompanyPositionsTableImpl(schemaName, tableName, alias string) companyPositionsTable {
	var (
		PositionNameColumn = postgres.StringColumn("position_name")
		allColumns         = postgres.ColumnList{PositionNameColumn}
		mutableColumns     = postgres.ColumnList{}
	)

	return companyPositionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PositionName: PositionNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
