//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Kpi = newKpiTable("public", "kpi", "")

type kpiTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	Date             postgres.ColumnDate
	Roads            postgres.ColumnFloat
	EmploeEngagement postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type KpiTable struct {
	kpiTable

	EXCLUDED kpiTable
}

// AS creates new KpiTable with assigned alias
func (a KpiTable) AS(alias string) *KpiTable {
	return newKpiTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new KpiTable with assigned schema name
func (a KpiTable) FromSchema(schemaName string) *KpiTable {
	return newKpiTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new KpiTable with assigned table prefix
func (a KpiTable) WithPrefix(prefix string) *KpiTable {
	return newKpiTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new KpiTable with assigned table suffix
func (a KpiTable) WithSuffix(suffix string) *KpiTable {
	return newKpiTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newKpiTable(schemaName, tableName, alias string) *KpiTable {
	return &KpiTable{
		kpiTable: newKpiTableImpl(schemaName, tableName, alias),
		EXCLUDED: newKpiTableImpl("", "excluded", ""),
	}
}

func newKpiTableImpl(schemaName, tableName, alias string) kpiTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		DateColumn             = postgres.DateColumn("date")
		RoadsColumn            = postgres.FloatColumn("roads")
		EmploeEngagementColumn = postgres.FloatColumn("emploe_engagement")
		allColumns             = postgres.ColumnList{IDColumn, DateColumn, RoadsColumn, EmploeEngagementColumn}
		mutableColumns         = postgres.ColumnList{DateColumn, RoadsColumn, EmploeEngagementColumn}
	)

	return kpiTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		Date:             DateColumn,
		Roads:            RoadsColumn,
		EmploeEngagement: EmploeEngagementColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
