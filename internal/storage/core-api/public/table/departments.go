//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Departments = newDepartmentsTable("public", "departments", "")

type departmentsTable struct {
	postgres.Table

	// Columns
	DepartmentName postgres.ColumnString
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DepartmentsTable struct {
	departmentsTable

	EXCLUDED departmentsTable
}

// AS creates new DepartmentsTable with assigned alias
func (a DepartmentsTable) AS(alias string) *DepartmentsTable {
	return newDepartmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DepartmentsTable with assigned schema name
func (a DepartmentsTable) FromSchema(schemaName string) *DepartmentsTable {
	return newDepartmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DepartmentsTable with assigned table prefix
func (a DepartmentsTable) WithPrefix(prefix string) *DepartmentsTable {
	return newDepartmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DepartmentsTable with assigned table suffix
func (a DepartmentsTable) WithSuffix(suffix string) *DepartmentsTable {
	return newDepartmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDepartmentsTable(schemaName, tableName, alias string) *DepartmentsTable {
	return &DepartmentsTable{
		departmentsTable: newDepartmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newDepartmentsTableImpl("", "excluded", ""),
	}
}

func newDepartmentsTableImpl(schemaName, tableName, alias string) departmentsTable {
	var (
		DepartmentNameColumn = postgres.StringColumn("department_name")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		allColumns           = postgres.ColumnList{DepartmentNameColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return departmentsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DepartmentName: DepartmentNameColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
