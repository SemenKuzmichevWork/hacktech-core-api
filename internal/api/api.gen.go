//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for UserBodyFamilyStatus.
const (
	Married UserBodyFamilyStatus = "married"
	Single  UserBodyFamilyStatus = "single"
	Unknown UserBodyFamilyStatus = "unknown"
)

// Defines values for UserBodySex.
const (
	Female UserBodySex = "female"
	Male   UserBodySex = "male"
	Other  UserBodySex = "other"
)

// Defines values for UserReportBodyKind.
const (
	UserReportBodyKindBusiness             UserReportBodyKind = "business"
	UserReportBodyKindDailyCheckups        UserReportBodyKind = "daily_checkups"
	UserReportBodyKindEvent                UserReportBodyKind = "event"
	UserReportBodyKindProjectParticipation UserReportBodyKind = "project_participation"
)

// CreateUsersRequest defines model for CreateUsersRequest.
type CreateUsersRequest struct {
	Users []UserBody `json:"users"`
}

// EmploeeyKPI defines model for EmploeeyKPI.
type EmploeeyKPI struct {
	Date       openapi_types.Date `json:"date"`
	Engagement float32            `json:"engagement"`
	Roads      float32            `json:"roads"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// Event defines model for Event.
type Event struct {
	Body EventBody `json:"body"`
	Id   EventID   `json:"id"`
}

// EventBody defines model for EventBody.
type EventBody struct {
	// CreatedBySlackId slack_id of the user who created the event
	CreatedBySlackId string `json:"created_by_slack_id"`
	Description      string `json:"description"`

	// Identifier unique custom identifier of event from slack
	Identifier string `json:"identifier"`
	IsSent     bool   `json:"is_sent"`
	Title      string `json:"title"`
}

// EventID defines model for EventID.
type EventID = openapi_types.UUID

// EventIdentifier defines model for EventIdentifier.
type EventIdentifier = string

// User defines model for User.
type User struct {
	Body UserBody `json:"body"`
	Id   UserID   `json:"id"`
}

// UserBody defines model for UserBody.
type UserBody struct {
	CompanyPosition string               `json:"company_position"`
	Departments     []string             `json:"departments"`
	FamilyStatus    UserBodyFamilyStatus `json:"family_status"`
	IsActive        bool                 `json:"is_active"`
	IsAdmin         bool                 `json:"is_admin"`
	JoinedAt        openapi_types.Date   `json:"joined_at"`
	Role            string               `json:"role"`
	Sex             UserBodySex          `json:"sex"`
	SlackId         string               `json:"slack_id"`
}

// UserBodyFamilyStatus defines model for UserBody.FamilyStatus.
type UserBodyFamilyStatus string

// UserBodySex defines model for UserBody.Sex.
type UserBodySex string

// UserID defines model for UserID.
type UserID = openapi_types.UUID

// UserReport defines model for UserReport.
type UserReport struct {
	Body UserReportBody `json:"body"`
	Id   UserReportID   `json:"id"`
}

// UserReportBody defines model for UserReportBody.
type UserReportBody struct {
	Kind   UserReportBodyKind `json:"kind"`
	Rating int                `json:"rating"`

	// ReportedBy slack_id of the user who made the report
	ReportedBy string `json:"reported_by"`
}

// UserReportBodyKind defines model for UserReportBody.Kind.
type UserReportBodyKind string

// UserReportID defines model for UserReportID.
type UserReportID = openapi_types.UUID

// GetEventsParams defines parameters for GetEvents.
type GetEventsParams struct {
	Ids        *[]EventID         `form:"ids,omitempty" json:"ids,omitempty"`
	Identifier *[]EventIdentifier `form:"identifier,omitempty" json:"identifier,omitempty"`
}

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	Ids             *[]UserID           `form:"ids,omitempty" json:"ids,omitempty"`
	Roles           *[]string           `form:"roles,omitempty" json:"roles,omitempty"`
	FamilyStatus    *[]string           `form:"family_status,omitempty" json:"family_status,omitempty"`
	CompanyPosition *[]string           `form:"company_position,omitempty" json:"company_position,omitempty"`
	Name            *string             `form:"name,omitempty" json:"name,omitempty"`
	WorkSince       *openapi_types.Date `form:"work_since,omitempty" json:"work_since,omitempty"`
	Departments     *[]string           `form:"departments,omitempty" json:"departments,omitempty"`
	IsActive        *bool               `form:"is_active,omitempty" json:"is_active,omitempty"`
}

// PostEventsJSONRequestBody defines body for PostEvents for application/json ContentType.
type PostEventsJSONRequestBody = EventBody

// PatchEventsIdJSONRequestBody defines body for PatchEventsId for application/json ContentType.
type PatchEventsIdJSONRequestBody = EventBody

// PostUserReportsJSONRequestBody defines body for PostUserReports for application/json ContentType.
type PostUserReportsJSONRequestBody = UserReportBody

// PostUserReportsKpiJSONRequestBody defines body for PostUserReportsKpi for application/json ContentType.
type PostUserReportsKpiJSONRequestBody = EmploeeyKPI

// UpdateUserReportJSONRequestBody defines body for UpdateUserReport for application/json ContentType.
type UpdateUserReportJSONRequestBody = UserReportBody

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = CreateUsersRequest

// PatchUsersIdJSONRequestBody defines body for PatchUsersId for application/json ContentType.
type PatchUsersIdJSONRequestBody = UserBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all events
	// (GET /events)
	GetEvents(w http.ResponseWriter, r *http.Request, params GetEventsParams)
	// Create an event
	// (POST /events)
	PostEvents(w http.ResponseWriter, r *http.Request)
	// Delete an event
	// (DELETE /events/{id})
	DeleteEventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get an event by ID
	// (GET /events/{id})
	GetEventsId(w http.ResponseWriter, r *http.Request, id string)
	// Update an event
	// (PATCH /events/{id})
	PatchEventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Create a user report
	// (POST /user-reports)
	PostUserReports(w http.ResponseWriter, r *http.Request)
	// Create a user KPI
	// (POST /user-reports/kpi)
	PostUserReportsKpi(w http.ResponseWriter, r *http.Request)
	// Update a user report
	// (PATCH /user-reports/{id})
	UpdateUserReport(w http.ResponseWriter, r *http.Request, id UserReportID)
	// Get users by filters
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams)
	// Create a new user
	// (POST /users)
	PostUsers(w http.ResponseWriter, r *http.Request)
	// Delete a user
	// (DELETE /users/{id})
	DeleteUsersId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update user details
	// (PATCH /users/{id})
	PatchUsersId(w http.ResponseWriter, r *http.Request, id UserID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetEvents operation middleware
func (siw *ServerInterfaceWrapper) GetEvents(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEventsParams

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ids", Err: err})
		return
	}

	// ------------- Optional query parameter "identifier" -------------

	err = runtime.BindQueryParameter("form", true, false, "identifier", r.URL.Query(), &params.Identifier)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "identifier", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEvents(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostEvents operation middleware
func (siw *ServerInterfaceWrapper) PostEvents(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostEvents(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteEventsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteEventsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEventsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetEventsId operation middleware
func (siw *ServerInterfaceWrapper) GetEventsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEventsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchEventsId operation middleware
func (siw *ServerInterfaceWrapper) PatchEventsId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchEventsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserReports operation middleware
func (siw *ServerInterfaceWrapper) PostUserReports(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserReports(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserReportsKpi operation middleware
func (siw *ServerInterfaceWrapper) PostUserReportsKpi(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserReportsKpi(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateUserReport operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserReport(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserReportID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserReport(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUsersParams

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ids", Err: err})
		return
	}

	// ------------- Optional query parameter "roles" -------------

	err = runtime.BindQueryParameter("form", true, false, "roles", r.URL.Query(), &params.Roles)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "roles", Err: err})
		return
	}

	// ------------- Optional query parameter "family_status" -------------

	err = runtime.BindQueryParameter("form", true, false, "family_status", r.URL.Query(), &params.FamilyStatus)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "family_status", Err: err})
		return
	}

	// ------------- Optional query parameter "company_position" -------------

	err = runtime.BindQueryParameter("form", true, false, "company_position", r.URL.Query(), &params.CompanyPosition)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "company_position", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "work_since" -------------

	err = runtime.BindQueryParameter("form", true, false, "work_since", r.URL.Query(), &params.WorkSince)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "work_since", Err: err})
		return
	}

	// ------------- Optional query parameter "departments" -------------

	err = runtime.BindQueryParameter("form", true, false, "departments", r.URL.Query(), &params.Departments)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "departments", Err: err})
		return
	}

	// ------------- Optional query parameter "is_active" -------------

	err = runtime.BindQueryParameter("form", true, false, "is_active", r.URL.Query(), &params.IsActive)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "is_active", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUsersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUsersId operation middleware
func (siw *ServerInterfaceWrapper) PatchUsersId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id UserID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/events", wrapper.GetEvents)
	m.HandleFunc("POST "+options.BaseURL+"/events", wrapper.PostEvents)
	m.HandleFunc("DELETE "+options.BaseURL+"/events/{id}", wrapper.DeleteEventsId)
	m.HandleFunc("GET "+options.BaseURL+"/events/{id}", wrapper.GetEventsId)
	m.HandleFunc("PATCH "+options.BaseURL+"/events/{id}", wrapper.PatchEventsId)
	m.HandleFunc("POST "+options.BaseURL+"/user-reports", wrapper.PostUserReports)
	m.HandleFunc("POST "+options.BaseURL+"/user-reports/kpi", wrapper.PostUserReportsKpi)
	m.HandleFunc("PATCH "+options.BaseURL+"/user-reports/{id}", wrapper.UpdateUserReport)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.GetUsers)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.PostUsers)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/{id}", wrapper.DeleteUsersId)
	m.HandleFunc("PATCH "+options.BaseURL+"/users/{id}", wrapper.PatchUsersId)

	return m
}

type GetEventsRequestObject struct {
	Params GetEventsParams
}

type GetEventsResponseObject interface {
	VisitGetEventsResponse(w http.ResponseWriter) error
}

type GetEvents200JSONResponse []Event

func (response GetEvents200JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents400JSONResponse Error

func (response GetEvents400JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents403JSONResponse Error

func (response GetEvents403JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetEvents500JSONResponse Error

func (response GetEvents500JSONResponse) VisitGetEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostEventsRequestObject struct {
	Body *PostEventsJSONRequestBody
}

type PostEventsResponseObject interface {
	VisitPostEventsResponse(w http.ResponseWriter) error
}

type PostEvents200JSONResponse Event

func (response PostEvents200JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents400JSONResponse Error

func (response PostEvents400JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents403JSONResponse Error

func (response PostEvents403JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostEvents500JSONResponse Error

func (response PostEvents500JSONResponse) VisitPostEventsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEventsIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteEventsIdResponseObject interface {
	VisitDeleteEventsIdResponse(w http.ResponseWriter) error
}

type DeleteEventsId204Response struct {
}

func (response DeleteEventsId204Response) VisitDeleteEventsIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteEventsId400JSONResponse Error

func (response DeleteEventsId400JSONResponse) VisitDeleteEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEventsId403JSONResponse Error

func (response DeleteEventsId403JSONResponse) VisitDeleteEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteEventsId500JSONResponse Error

func (response DeleteEventsId500JSONResponse) VisitDeleteEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsIdRequestObject struct {
	Id string `json:"id"`
}

type GetEventsIdResponseObject interface {
	VisitGetEventsIdResponse(w http.ResponseWriter) error
}

type GetEventsId200JSONResponse Event

func (response GetEventsId200JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsId400JSONResponse Error

func (response GetEventsId400JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsId403JSONResponse Error

func (response GetEventsId403JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetEventsId500JSONResponse Error

func (response GetEventsId500JSONResponse) VisitGetEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchEventsIdRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *PatchEventsIdJSONRequestBody
}

type PatchEventsIdResponseObject interface {
	VisitPatchEventsIdResponse(w http.ResponseWriter) error
}

type PatchEventsId200JSONResponse Event

func (response PatchEventsId200JSONResponse) VisitPatchEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchEventsId400JSONResponse Error

func (response PatchEventsId400JSONResponse) VisitPatchEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchEventsId403JSONResponse Error

func (response PatchEventsId403JSONResponse) VisitPatchEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchEventsId500JSONResponse Error

func (response PatchEventsId500JSONResponse) VisitPatchEventsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReportsRequestObject struct {
	Body *PostUserReportsJSONRequestBody
}

type PostUserReportsResponseObject interface {
	VisitPostUserReportsResponse(w http.ResponseWriter) error
}

type PostUserReports201JSONResponse UserReport

func (response PostUserReports201JSONResponse) VisitPostUserReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReports400JSONResponse Error

func (response PostUserReports400JSONResponse) VisitPostUserReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReports403JSONResponse Error

func (response PostUserReports403JSONResponse) VisitPostUserReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReports500JSONResponse Error

func (response PostUserReports500JSONResponse) VisitPostUserReportsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReportsKpiRequestObject struct {
	Body *PostUserReportsKpiJSONRequestBody
}

type PostUserReportsKpiResponseObject interface {
	VisitPostUserReportsKpiResponse(w http.ResponseWriter) error
}

type PostUserReportsKpi201JSONResponse EmploeeyKPI

func (response PostUserReportsKpi201JSONResponse) VisitPostUserReportsKpiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReportsKpi400JSONResponse Error

func (response PostUserReportsKpi400JSONResponse) VisitPostUserReportsKpiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReportsKpi403JSONResponse Error

func (response PostUserReportsKpi403JSONResponse) VisitPostUserReportsKpiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostUserReportsKpi500JSONResponse Error

func (response PostUserReportsKpi500JSONResponse) VisitPostUserReportsKpiResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserReportRequestObject struct {
	Id   UserReportID `json:"id"`
	Body *UpdateUserReportJSONRequestBody
}

type UpdateUserReportResponseObject interface {
	VisitUpdateUserReportResponse(w http.ResponseWriter) error
}

type UpdateUserReport200JSONResponse UserReport

func (response UpdateUserReport200JSONResponse) VisitUpdateUserReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserReport400JSONResponse Error

func (response UpdateUserReport400JSONResponse) VisitUpdateUserReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserReport403JSONResponse Error

func (response UpdateUserReport403JSONResponse) VisitUpdateUserReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserReport500JSONResponse Error

func (response UpdateUserReport500JSONResponse) VisitUpdateUserReportResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersRequestObject struct {
	Params GetUsersParams
}

type GetUsersResponseObject interface {
	VisitGetUsersResponse(w http.ResponseWriter) error
}

type GetUsers200JSONResponse []User

func (response GetUsers200JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers400JSONResponse Error

func (response GetUsers400JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers403JSONResponse Error

func (response GetUsers403JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetUsers500JSONResponse Error

func (response GetUsers500JSONResponse) VisitGetUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostUsersRequestObject struct {
	Body *PostUsersJSONRequestBody
}

type PostUsersResponseObject interface {
	VisitPostUsersResponse(w http.ResponseWriter) error
}

type PostUsers200JSONResponse User

func (response PostUsers200JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers400JSONResponse Error

func (response PostUsers400JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers403JSONResponse Error

func (response PostUsers403JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostUsers500JSONResponse Error

func (response PostUsers500JSONResponse) VisitPostUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteUsersIdResponseObject interface {
	VisitDeleteUsersIdResponse(w http.ResponseWriter) error
}

type DeleteUsersId204Response struct {
}

func (response DeleteUsersId204Response) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUsersId400JSONResponse Error

func (response DeleteUsersId400JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersId403JSONResponse Error

func (response DeleteUsersId403JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUsersId500JSONResponse Error

func (response DeleteUsersId500JSONResponse) VisitDeleteUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersIdRequestObject struct {
	Id   UserID `json:"id"`
	Body *PatchUsersIdJSONRequestBody
}

type PatchUsersIdResponseObject interface {
	VisitPatchUsersIdResponse(w http.ResponseWriter) error
}

type PatchUsersId200JSONResponse User

func (response PatchUsersId200JSONResponse) VisitPatchUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersId400JSONResponse Error

func (response PatchUsersId400JSONResponse) VisitPatchUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersId403JSONResponse Error

func (response PatchUsersId403JSONResponse) VisitPatchUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersId500JSONResponse Error

func (response PatchUsersId500JSONResponse) VisitPatchUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all events
	// (GET /events)
	GetEvents(ctx context.Context, request GetEventsRequestObject) (GetEventsResponseObject, error)
	// Create an event
	// (POST /events)
	PostEvents(ctx context.Context, request PostEventsRequestObject) (PostEventsResponseObject, error)
	// Delete an event
	// (DELETE /events/{id})
	DeleteEventsId(ctx context.Context, request DeleteEventsIdRequestObject) (DeleteEventsIdResponseObject, error)
	// Get an event by ID
	// (GET /events/{id})
	GetEventsId(ctx context.Context, request GetEventsIdRequestObject) (GetEventsIdResponseObject, error)
	// Update an event
	// (PATCH /events/{id})
	PatchEventsId(ctx context.Context, request PatchEventsIdRequestObject) (PatchEventsIdResponseObject, error)
	// Create a user report
	// (POST /user-reports)
	PostUserReports(ctx context.Context, request PostUserReportsRequestObject) (PostUserReportsResponseObject, error)
	// Create a user KPI
	// (POST /user-reports/kpi)
	PostUserReportsKpi(ctx context.Context, request PostUserReportsKpiRequestObject) (PostUserReportsKpiResponseObject, error)
	// Update a user report
	// (PATCH /user-reports/{id})
	UpdateUserReport(ctx context.Context, request UpdateUserReportRequestObject) (UpdateUserReportResponseObject, error)
	// Get users by filters
	// (GET /users)
	GetUsers(ctx context.Context, request GetUsersRequestObject) (GetUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	PostUsers(ctx context.Context, request PostUsersRequestObject) (PostUsersResponseObject, error)
	// Delete a user
	// (DELETE /users/{id})
	DeleteUsersId(ctx context.Context, request DeleteUsersIdRequestObject) (DeleteUsersIdResponseObject, error)
	// Update user details
	// (PATCH /users/{id})
	PatchUsersId(ctx context.Context, request PatchUsersIdRequestObject) (PatchUsersIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetEvents operation middleware
func (sh *strictHandler) GetEvents(w http.ResponseWriter, r *http.Request, params GetEventsParams) {
	var request GetEventsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEvents(ctx, request.(GetEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsResponseObject); ok {
		if err := validResponse.VisitGetEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostEvents operation middleware
func (sh *strictHandler) PostEvents(w http.ResponseWriter, r *http.Request) {
	var request PostEventsRequestObject

	var body PostEventsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostEvents(ctx, request.(PostEventsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostEvents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostEventsResponseObject); ok {
		if err := validResponse.VisitPostEventsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteEventsId operation middleware
func (sh *strictHandler) DeleteEventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteEventsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteEventsId(ctx, request.(DeleteEventsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteEventsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteEventsIdResponseObject); ok {
		if err := validResponse.VisitDeleteEventsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetEventsId operation middleware
func (sh *strictHandler) GetEventsId(w http.ResponseWriter, r *http.Request, id string) {
	var request GetEventsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetEventsId(ctx, request.(GetEventsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetEventsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetEventsIdResponseObject); ok {
		if err := validResponse.VisitGetEventsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchEventsId operation middleware
func (sh *strictHandler) PatchEventsId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request PatchEventsIdRequestObject

	request.Id = id

	var body PatchEventsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchEventsId(ctx, request.(PatchEventsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchEventsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchEventsIdResponseObject); ok {
		if err := validResponse.VisitPatchEventsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserReports operation middleware
func (sh *strictHandler) PostUserReports(w http.ResponseWriter, r *http.Request) {
	var request PostUserReportsRequestObject

	var body PostUserReportsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserReports(ctx, request.(PostUserReportsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserReports")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserReportsResponseObject); ok {
		if err := validResponse.VisitPostUserReportsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUserReportsKpi operation middleware
func (sh *strictHandler) PostUserReportsKpi(w http.ResponseWriter, r *http.Request) {
	var request PostUserReportsKpiRequestObject

	var body PostUserReportsKpiJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUserReportsKpi(ctx, request.(PostUserReportsKpiRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUserReportsKpi")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUserReportsKpiResponseObject); ok {
		if err := validResponse.VisitPostUserReportsKpiResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserReport operation middleware
func (sh *strictHandler) UpdateUserReport(w http.ResponseWriter, r *http.Request, id UserReportID) {
	var request UpdateUserReportRequestObject

	request.Id = id

	var body UpdateUserReportJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserReport(ctx, request.(UpdateUserReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserReport")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateUserReportResponseObject); ok {
		if err := validResponse.VisitUpdateUserReportResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUsers operation middleware
func (sh *strictHandler) GetUsers(w http.ResponseWriter, r *http.Request, params GetUsersParams) {
	var request GetUsersRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsers(ctx, request.(GetUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetUsersResponseObject); ok {
		if err := validResponse.VisitGetUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostUsers operation middleware
func (sh *strictHandler) PostUsers(w http.ResponseWriter, r *http.Request) {
	var request PostUsersRequestObject

	var body PostUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostUsers(ctx, request.(PostUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostUsersResponseObject); ok {
		if err := validResponse.VisitPostUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUsersId operation middleware
func (sh *strictHandler) DeleteUsersId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUsersId(ctx, request.(DeleteUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteUsersIdResponseObject); ok {
		if err := validResponse.VisitDeleteUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PatchUsersId operation middleware
func (sh *strictHandler) PatchUsersId(w http.ResponseWriter, r *http.Request, id UserID) {
	var request PatchUsersIdRequestObject

	request.Id = id

	var body PatchUsersIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersId(ctx, request.(PatchUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PatchUsersIdResponseObject); ok {
		if err := validResponse.VisitPatchUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"MwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
